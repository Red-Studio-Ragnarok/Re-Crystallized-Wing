import org.jetbrains.gradle.ext.Gradle

plugins {
    id("java")
    id("java-library")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.8"
    id("com.gtnewhorizons.retrofuturagradle") version "1.4.1"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("io.freefair.lombok") version "8.7.1"
}

// Add version to the jar name
version project.version

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources jar when building and publishing
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.fork = true
}

minecraft {
    mcVersion = '1.12.2'

    username = 'Desoroxxx'

    extraRunJvmArguments.addAll("-Xmx4G", "-Dforge.logging.console.level=debug")

    injectedTags.put('ID', project.id)
    injectedTags.put('VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set("dev.redstudio.${project.id}.Tags")
}

processResources {
    inputs.property "id", project.id
    inputs.property "version", project.version
    filesMatching("mcmod.info") { fcd ->
        include "mcmod.info"
        fcd.expand (
                "id": project.id,
                "version": project.version
        )
    }
}

idea {
    module {
        inheritOutputDirs = true
        excludeDirs = [
                file(".settings"),
                file(".github"),
                file(".gradle"),
                file("gradle"),
                file(".idea"),
                file("build"),
                file("run"),
                file("bin")
        ]
    }

    project { settings {
        runConfigurations {
            "Client"(Gradle) {
                taskNames = ["runClient"]
            }
            "Server"(Gradle) {
                taskNames = ["runServer"]
            }
            "Obfuscated Client"(Gradle) {
                taskNames = ["runObfClient"]
            }
            "Obfuscated Server"(Gradle) {
                taskNames = ["runObfServer"]
            }
            "Vanilla Client"(Gradle) {
                taskNames = ["runVanillaClient"]
            }
            "Vanilla Server"(Gradle) {
                taskNames = ["runVanillaServer"]
            }
        }

        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = "-encoding utf8"
                moduleJavacAdditionalOptions = [ (project.id + ".main"): tasks.compileJava.options.compilerArgs.collect { """ + it + """ }.join(" ") ]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
